{"ast":null,"code":"var _jsxFileName = \"/Users/narayankumarjha/Documents/practice/portfoliopro/client/src/PortfolioContainer/Home/Header/Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from \"../../../Utilities/commonUtils\";\nimport ScrollService from \"../../../Utilities/scrollService\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Header.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Header() {\n  _s();\n\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOption, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = currentScreen => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n  };\n\n  let currentScreenSubscription = ScrollService.currentScreenBroadCaster.subscribe(updateCurrentScreen);\n\n  const getHedaerOptions = () => {\n    return TOTAL_SCREENS.map((Screen, i) => {\n      {\n        console.log(\" in header screen checking\", Screen);\n      }\n\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: getHedaerOptionsClass(i),\n        onClick: () => switchScreen(i, Screen),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: Screen.screen_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 8\n        }, this)\n      }, Screen.screen_name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this);\n    });\n  };\n\n  const getHedaerOptionsClass = index => {\n    let classes = \"header-option \";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator \";\n    if (selectedScreen === index) classes += \"selected-header-option \";\n    return classes;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n    screenComponent.scrollIntoView({\n      behavior: \"smooth\"\n    });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n  useEffect(() => {\n    return () => {\n      currentScreenSubscription.unsubscribe();\n    };\n  }, [currentScreenSubscription]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header-container\",\n    onClick: () => setShowHeaderOptions(!showHeaderOption),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-hamburger\",\n        onClick: () => setShowHeaderOptions(!showHeaderOption),\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"header-hamburger-bars\",\n          icon: faBars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"NK JHA~\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: showHeaderOption ? \"header-options show-hamburger-options\" : \"header-options\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Header, \"4ZqkRlnODep9nc5bTz+C1/wMtBo=\");\n\n_c = Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/narayankumarjha/Documents/practice/portfoliopro/client/src/PortfolioContainer/Home/Header/Header.js"],"names":["React","useState","useEffect","TOTAL_SCREENS","GET_SCREEN_INDEX","ScrollService","faBars","FontAwesomeIcon","Header","selectedScreen","setSelectedScreen","showHeaderOption","setShowHeaderOptions","updateCurrentScreen","currentScreen","screenInView","screenIndex","currentScreenSubscription","currentScreenBroadCaster","subscribe","getHedaerOptions","map","Screen","i","console","log","getHedaerOptionsClass","switchScreen","screen_name","index","classes","length","screen","screenComponent","document","getElementById","scrollIntoView","behavior","unsubscribe"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from \"react\";\nimport {\n  TOTAL_SCREENS,\n  GET_SCREEN_INDEX,\n} from \"../../../Utilities/commonUtils\";\nimport ScrollService from \"../../../Utilities/scrollService\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Header.css\";\n\nexport default function Header() {\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOption, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = (currentScreen) => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n  };\n  let currentScreenSubscription =\n    ScrollService.currentScreenBroadCaster.subscribe(updateCurrentScreen);\n\n  const getHedaerOptions = () => {\n    return TOTAL_SCREENS.map((Screen, i) => {\n      {  console.log(\" in header screen checking\" , Screen)}\n      <div\n        key={Screen.screen_name}\n        className={getHedaerOptionsClass(i)}\n        onClick={() => switchScreen(i, Screen)}\n      >\n       <span>{Screen.screen_name}</span>\n      </div>;\n    });\n  };\n  const getHedaerOptionsClass = (index) => {\n    let classes = \"header-option \";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator \";\n\n    if (selectedScreen === index) classes += \"selected-header-option \";\n\n    return classes;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n\n    screenComponent.scrollIntoView({ behavior: \"smooth\" });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n  useEffect(() => {\n    return () => {\n      currentScreenSubscription.unsubscribe();\n    };\n  }, [currentScreenSubscription])\n \n  return (\n   \n      <div\n        className=\"header-container\"\n        onClick={() => setShowHeaderOptions(!showHeaderOption)}\n      >\n        <div className=\"header-parent\">\n          <div\n            className=\"header-hamburger\"\n            onClick={() => setShowHeaderOptions(!showHeaderOption)}\n          >\n            <FontAwesomeIcon className=\"header-hamburger-bars\" icon={faBars} />\n          </div>\n          <div className=\"header-logo\">\n            <span>NK JHA~</span>\n          </div>\n          <div\n            className={\n              showHeaderOption\n                ? \"header-options show-hamburger-options\"\n                : \"header-options\"\n            }\n          >\n            {/* {getHedaerOptions()} */}\n          </div>\n        </div>\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}