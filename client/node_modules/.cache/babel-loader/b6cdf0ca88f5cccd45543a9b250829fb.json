{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nimport { object } from \"prop-types\";\nexport default class ScrollService {\n  constructor() {\n    this.scollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"ContactMe\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.scollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementInview = (elem, type) => {\n      let rec = elem.getBoundingClienRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyvisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop > 0 && elementBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyvisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n          defaul: return false;\n\n      }\n    };\n\n    this.checkCurrentScreentHandlerViewport = event => {\n      if (!event || object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDom = document.getElementById(screen.screen_name);\n        if (!screenFromDom) continue;\n        let fullyVisible = this.isElementInview(screenFromDom, \"complete\");\n        let partiallyvisible = this.isElementInview(screenFromDom, \"partial\");\n\n        if (fullyVisible || partiallyvisible) {\n          if (partiallyvisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", this.checkCurrentScreentHandlerViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"sources":["/Users/narayankumarjha/Documents/practice/portfoliopro/client/src/Utilities/scrollService.js"],"names":["TOTAL_SCREENS","Subject","object","ScrollService","constructor","scollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scollToHome","homeScreen","isElementInview","elem","type","rec","getBoundingClienRect","elementTop","top","elementBottom","Bottom","partiallyvisible","window","innerHeight","completelyVisible","defaul","checkCurrentScreentHandlerViewport","event","keys","length","screen","screenFromDom","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,eAAe,MAAMC,aAAN,CAAoB;AAMjCC,EAAAA,WAAW,GAAG;AAAA,SAGdC,aAHc,GAGE,MAAM;AACpB,UAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAtB;AACA,UAAI,CAACF,eAAL,EAAsB;AACtBA,MAAAA,eAAe,CAACG,cAAhB,CAA+B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA/B;AACD,KAPa;;AAAA,SAQdC,WARc,GAQA,MAAM;AAClB,UAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;AACA,UAAI,CAACI,UAAL,EAAiB;AACjBA,MAAAA,UAAU,CAACH,cAAX,CAA0B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA1B;AACD,KAZa;;AAAA,SAadG,eAbc,GAaI,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAChC,UAAIC,GAAG,GAAGF,IAAI,CAACG,oBAAL,EAAV;AACA,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACA,UAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;AAEA,UAAIC,gBAAgB,GAClBJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,aAAa,IAAI,CADtD;AAGA,UAAIK,iBAAiB,GACnBP,UAAU,GAAG,CAAb,IAAkBE,aAAa,IAAIG,MAAM,CAACC,WAD5C;;AAGA,cAAQT,IAAR;AACE,aAAK,SAAL;AACE,iBAAOO,gBAAP;;AAEF,aAAK,UAAL;AACE,iBAAOG,iBAAP;;AACAC,UAAAA,MAAM,EAAE,OAAO,KAAP;;AANZ;AAQD,KAhCa;;AAAA,SAkCdC,kCAlCc,GAkCwBC,KAAD,IAAW;AAC9C,UAAI,CAACA,KAAD,IAAU1B,MAAM,CAAC2B,IAAP,CAAYD,KAAZ,EAAmBE,MAAnB,GAA4B,CAA1C,EAA6C;;AAC7C,WAAK,IAAIC,MAAT,IAAmB/B,aAAnB,EAAkC;AAChC,YAAIgC,aAAa,GAAGzB,QAAQ,CAACC,cAAT,CAAwBuB,MAAM,CAACE,WAA/B,CAApB;AACA,YAAI,CAACD,aAAL,EAAoB;AAEpB,YAAIE,YAAY,GAAG,KAAKrB,eAAL,CAAqBmB,aAArB,EAAoC,UAApC,CAAnB;AACA,YAAIV,gBAAgB,GAAG,KAAKT,eAAL,CAAqBmB,aAArB,EAAoC,SAApC,CAAvB;;AAEA,YAAIE,YAAY,IAAIZ,gBAApB,EAAsC;AACpC,cAAIA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAhC,EAAiD;AAC/ChC,YAAAA,aAAa,CAACiC,mBAAd,CAAkCC,IAAlC,CAAuC;AACrCC,cAAAA,YAAY,EAAEP,MAAM,CAACE;AADgB,aAAvC;AAGAF,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;AACA;AACD;;AACD,cAAIG,YAAJ,EAAkB;AAChB/B,YAAAA,aAAa,CAACoC,wBAAd,CAAuCF,IAAvC,CAA4C;AAC1CG,cAAAA,YAAY,EAAET,MAAM,CAACE;AADqB,aAA5C;AAGA;AACD;AACF;AACF;AACF,KA3Da;;AACZV,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKd,kCAAvC;AACD;;AARgC;AAAdxB,a,CACZuC,a,GAAgB,IAAIvC,aAAJ,E;AADJA,a,CAGZoC,wB,GAA2B,IAAItC,OAAJ,E;AAHfE,a,CAIZiC,mB,GAAsB,IAAInC,OAAJ,E","sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nimport { object } from \"prop-types\";\n\nexport default class ScrollService {\n  static scrollHandler = new ScrollService();\n\n  static currentScreenBroadCaster = new Subject();\n  static currentScreenFadeIn = new Subject();\n\n  constructor() {\n    window.addEventListener(\"scroll\", this.checkCurrentScreentHandlerViewport);\n  }\n  scollToHireMe = () => {\n    let contactMeScreen = document.getElementById(\"ContactMe\");\n    if (!contactMeScreen) return;\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\n  };\n  scollToHome = () => {\n    let homeScreen = document.getElementById(\"Home\");\n    if (!homeScreen) return;\n    homeScreen.scrollIntoView({ behavior: \"smooth\" });\n  };\n  isElementInview = (elem, type) => {\n    let rec = elem.getBoundingClienRect();\n    let elementTop = rec.top;\n    let elementBottom = rec.Bottom;\n\n    let partiallyvisible =\n      elementTop < window.innerHeight && elementBottom >= 0;\n\n    let completelyVisible =\n      elementTop > 0 && elementBottom <= window.innerHeight;\n\n    switch (type) {\n      case \"partial\":\n        return partiallyvisible;\n\n      case \"complete\":\n        return completelyVisible;\n        defaul: return false;\n    }\n  };\n\n  checkCurrentScreentHandlerViewport = (event) => {\n    if (!event || object.keys(event).length < 1) return;\n    for (let screen of TOTAL_SCREENS) {\n      let screenFromDom = document.getElementById(screen.screen_name);\n      if (!screenFromDom) continue;\n\n      let fullyVisible = this.isElementInview(screenFromDom, \"complete\");\n      let partiallyvisible = this.isElementInview(screenFromDom, \"partial\");\n\n      if (fullyVisible || partiallyvisible) {\n        if (partiallyvisible && !screen.alreadyRendered) {\n          ScrollService.currentScreenFadeIn.next({\n            fadeInScreen: screen.screen_name,\n          });\n          screen[\"alreadyRendered\"] = true;\n          break;\n        }\n        if (fullyVisible) {\n          ScrollService.currentScreenBroadCaster.next({\n            screenInView: screen.screen_name,\n          });\n          break;\n        }\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}